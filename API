local camera = game:GetService("Workspace").CurrentCamera
local viewportSize = camera.ViewportSize
local screenCenter = Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)

local espSettings = {
    Boxes = false,
    CornerBoxes = false,
    Snaplines = false,
    FovCircle = false,
    Skeleton = false,
    Nametags = false,
    Font = Enum.Font.RobotoCondensed,
    ChamsAlwaysOnTop = true,
}

local espColors = {
    Boxes = Color3.fromRGB(255, 0, 0),
    CornerBoxes = Color3.fromRGB(255, 0, 0),
    Snaplines = Color3.fromRGB(255, 0, 0),
    FovCircle = Color3.fromRGB(255, 0, 0),
    Skeleton = Color3.fromRGB(255, 0, 0),
    Nametags = Color3.fromRGB(255, 0, 0),
    TextLabels = Color3.fromRGB(255, 0, 0),
    Chams = Color3.fromRGB(255, 0, 0),
    ChamsTweenEnd
}

local function transparencySettings = {
    Chams = 0,

}

local cache = {
  local CornerBoxes = {},
  local Boxes = {},
  local Chams = {},
  local Snaplines = {},
  local NameTags = {},
  local HealthBars = {},
  local FontElements = {},
  local DisplayBoxes = {},
  local FovDrawings = {},
}

function FindFirstDescendantOfClass(parent, className)
	if not parent or not className then return end

	for _, descendant in ipairs(parent:GetDescendants()) do
		
		if descendant:IsA(className) then
			return descendant
		end
	end

	return nil
end

local function createTextLabel(text1, inner)
	local text = Instance.new("TextLabel")
	text.Text = text1
	text.Size = UDim2.new(1, 0, 1, 0)
	text.TextScaled = true
	text.Font = Enum.Font.RobotoCondensed
	text.BackgroundTransparency = 0.5
	text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	text.FontFace.Style = Enum.FontStyle.Italic
	
	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(113, 104, 176)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 65, 252))
	})

	gradient.Parent = text

	local uiCorner1 = Instance.new("UICorner")
	uiCorner1.CornerRadius = UDim.new(0, 5)
	uiCorner1.Parent = text
	
	text.Parent = inner
end

local function createIcon(icon1, inner)
	local icon = Instance.new("ImageLabel")
	icon.BackgroundTransparency = 1
	icon.Size = UDim2.new(1, 0, 1, 0)
	icon.Image = icon1
	icon.Parent = inner
end

local function addDisplayBox(model, TextTable)
	if not model then return end

	local o, size = model:GetBoundingBox()
	
	local centerPart = Instance.new("Part")
	centerPart.Position = o.Position
	centerPart.Transparency = 1
	centerPart.CanCollide = false
	centerPart.Parent = model
	
	local weld = Instance.new("WeldConstraint")
	weld.Part0 = centerPart
	weld.Part1 = FindFirstDescendantOfClass(model, "BasePart")
	weld.Parent = centerPart
	
	local baseSize = size.Magnitude

	local minSize, maxSize = 5, 100
	local minScale, maxScale = 15, 45

	local normalized = math.clamp((baseSize - minSize) / (maxSize - minSize), 0, 1)
	local guiScale = minScale + (maxScale - minScale) * normalized

	local billboardGui = Instance.new("BillboardGui")
	billboardGui.Size = UDim2.new(guiScale * 2, 0, guiScale, 0)
	billboardGui.StudsOffset = Vector3.new(0, size.Y * 1.5, 0)
	billboardGui.AlwaysOnTop = true
	billboardGui.Adornee = centerPart
	billboardGui.Parent = model

	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(1, 0, 1, 0)
	frame.BackgroundTransparency = 0.8
	frame.BackgroundColor3 = Color3.fromRGB()
	frame.Parent = billboardGui
	
	local innerFrame = Instance.new("Frame")
	innerFrame.BackgroundTransparency = 1
	innerFrame.Size = UDim2.new(frame.Size.X.Scale * 0.8, 0, frame.Size.Y.Scale * 0.8, 0)
	innerFrame.AutomaticSize = Enum.AutomaticSize.Y
	innerFrame.AnchorPoint = Vector2.new(0.5, 0.5)
	innerFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
	innerFrame.Parent = frame

	local layout = Instance.new("UIGridLayout")
	layout.CellSize = UDim2.new(0.3, 0, 0.3, 0)
	layout.CellPadding = UDim2.new(0, 5, 0, 5)
	layout.FillDirection = Enum.FillDirection.Horizontal
	layout.FillDirectionMaxCells = 2
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	layout.VerticalAlignment = Enum.VerticalAlignment.Top
	layout.Parent = innerFrame
	
	if TextTable then
		
		for i, element in pairs(TextTable) do
			
			createIcon(element.Icon, innerFrame)
			createTextLabel(element.Text, innerFrame)
		end
	end

	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(176, 95, 126)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 38, 244))
	})

	gradient.Parent = frame

	local uiCorner = Instance.new("UICorner")
	uiCorner.CornerRadius = UDim.new(0, 25)
	uiCorner.Parent = frame
end

local function drawFOVCircle()
    local circle = Drawing.new("Circle")
    circle.NumSides = 50
    circle.Radius = 90
    circle.Position = screenCenter
    circle.Thickness = 1
    circle.Visible = true
    circle.Filled = false

    table.insert(FovDrawings, circle)
end

local function drawSnaplines(model, from, to)
    if not model then return end

    local line = cache.Snaplines[model]

    if not line then
        local line = Drawing.new("Line")
        line.Thickness = 1
        line.Visible = true
        line.Color = espColors.Snaplines
        cache.Snaplines[model] = line
    end

    line.From = from or screenCenter
    line.To = to
    line.Visible = true
end

local function createChams(model)
    if model:IsA("BasePart")
        local chams = Instance.new("BoxHandleAdornment")
        chams.Transparency = transparencySettings.Chams
        chams.Size = model.Size
        chams.ZIndex = 10
        chams.AlwaysOnTop = espSettings.ChamsAlwaysOnTop
        chams.Color = espColors.Chams
        chams.Adornee = model
        chams.Parent = model
        chams.Name = "Chams"
        cache.Chams[model] = {chams}

    elseif model:IsA("Model") then
        local chamsList = {}

        for i, part in pairs(model:GetDescendants()) do
            if not part:IsA("BasePart") then continue end

            local chams = Instance.new("BoxHandleAdornment")
            chams.Transparency = transparencySettings.Chams
            chams.Size = part.Size
            chams.ZIndex = 10
            chams.AlwaysOnTop = espSettings.ChamsAlwaysOnTop
            chams.Color = espColors.Chams
            chams.Adornee = part
            chams.Parent = part
            chams.Name = "Chams"
            
            table.insert(chamsList, chams)
        end

        cache.Chams[model] = chamsList
    end
end

local function chamsTween(model)
    local chams = cache.Chams[model]
    if not chams then return end

    for _, cham in ipairs(chams) do

        if cham and cham:IsA("BoxHandleAdornment") then

            local tweenInfo = TweenInfo.new(0.75, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local goal = {Color = espColors.ChamsTweenEnd}

            local tween = TweenService:Create(cham, tweenInfo, goal)
            tween:Play()
        end
    end
end

local function removeSnapline(model)
    if not model then return end

    local line = cache.Snaplines[model]

    if line then
        line:Destroy()
        cache.Snaplines[player] = nil
    end
end

return {
    espSettings = espSettings,
    transparencySettings = transparencySettings,
    espColors = espColors,
    cache = cache,
    addDisplayBox = addDisplayBox,
    drawSnaplines = drawSnaplines,
    drawFOVCircle = drawFOVCircle,
    createChams = createChams,
    chamsTween = chamsTween,
    removeSnapline = removeSnapline,
}
